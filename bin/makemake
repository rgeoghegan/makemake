#!/usr/bin/env ruby
require 'makemake_tasks'
require 'listen'
require 'colorize'

COMMANDS = ["build", "clear", "clear_all", "perpetual"]

def parse_args
    options = {:package => false}
    parser = OptionParser.new do |opts|
        opts.banner = "Usage: makemake.rb COMMAND
	COMMAND: one of #{COMMANDS.join(", ")}"

        opts.on("-p", "--[no-]package",
        	"Build packaged (self-contained) html") do |p|
		    Package.instance.enable = p
		    options[:package] = true
		end
    end.parse!


    if ARGV.length != 1
        raise ArgumentError.new(
        	"Wrong number of arguments (#{ARGV.length}, must be 1)"
        )
    elsif ! COMMANDS.include?(ARGV[0])
        raise ArgumentError.new(
        	"Command must be one of #{COMMANDS.join(", ")} (not #{ARGV[0]})"
        )
    end

    return options, ARGV[0]
end

def find_coffee_or_die
	verbose(false) do
		sh("which -s coffee") do |ok, res|
			if ! ok then
				puts "Could not find coffee-script executable coffee in path."
				exit 1
			end
		end
	end
end

def perpetual(task)
	task.invoke()
	Listen.to!('src', 'static') do |modified, added, removed|
		added.each do |filename|
			puts "Added #{filename}".green
		end
		modified.each do |filename|
			puts "Modified #{filename}".yellow
		end
		removed.each do |filename|
			puts "Deleted #{filename}".red
		end

		run_no_fail task
	end
end

begin
    opts, cmd = parse_args
rescue ArgumentError => e
    puts e
    exit 1
end

find_coffee_or_die

case cmd
when "clear"
	CLEAR_TASK.invoke
when "clear_all"
	CLEAR_ALL_TASK.invoke
when "perpetual"
	perpetual(task_by_symbol :default)
else
	if opts[:package]
		PACKAGE_TASK.invoke()
	else
		DEFAULT_TASK.invoke()
	end
end
