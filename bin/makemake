#!/usr/bin/env ruby
require 'makemake_tasks'
require 'listen'
require 'colorize'

COMMANDS = ["build", "package", "clear", "clear_all", "perpetual", "init"]

def parse_args
    options = {:package => false}
    OptionParser.new do |opts|
        opts.banner = (
        "Usage: makemake.rb COMMAND\n" +
        "" +
        "COMMAND: one of\n" +
        "" +
        "  build        downloads all the files speicifies in downloads.yaml, builds the\n" +
        "               necessary html and js files, and copies them along with everything\n" +
        "               else into build/\n" +
        "  package      packages all js, html, css and images into one html file\n" +
        "  clear        deletes the build/ directory\n" +
        "  clear_all    same as clear but also deletes the\n" +
        "               static_downloads/ directory.\n" +
        "  perpetual    run makemake build in a loop each time a file is\n" +
        "               modified.\n" +
        "  init         sets up the directories and necessary files for a new makemake\n" +
        "               project.\n"
        )
    end.parse!

    if ARGV.length == 0
        return options, "build"
    elsif ARGV.length != 1
        raise ArgumentError.new(
        	"Wrong number of arguments (#{ARGV.length}, must be 1)"
        )
    elsif ! COMMANDS.include?(ARGV[0])
        raise ArgumentError.new(
        	"Command must be one of #{COMMANDS.join(", ")} (not #{ARGV[0]})"
        )
    end

    return options, ARGV[0]
end

def find_coffee_or_die
	verbose(false) do
		sh("which -s coffee") do |ok, res|
			if ! ok then
				puts "Could not find coffee-script executable coffee in path."
				exit 1
			end
		end
	end
end

def task_by_name name
    name = name.to_s
    return Rake::Task[name.to_sym]
end

def perpetual(task)
	task.invoke()
	Listen.to!('src', 'static') do |modified, added, removed|
		added.each do |filename|
			puts "Added #{filename}".green
		end
		modified.each do |filename|
			puts "Modified #{filename}".yellow
		end
		removed.each do |filename|
			puts "Deleted #{filename}".red
		end

		run_no_fail task
	end
end

begin
    opts, cmd = parse_args
rescue ArgumentError => e
    puts e
    exit 1
end

find_coffee_or_die

case cmd
when "perpetual"
	perpetual(task_by_name "default")
when "build"
    task_by_name("default").invoke
else
    task_by_name(cmd).invoke
end

